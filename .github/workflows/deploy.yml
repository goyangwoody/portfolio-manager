name: Deploy to EC2 (Docker Compose)

on:
  push:
    branches: [ main ]   # <- 브랜치 이름. main/master/develop에 맞게 바꾸세요.

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
    
    
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
            node-version: 20
            cache: 'npm'
            cache-dependency-path: PortfolioPulse/package-lock.json

      # 프론트엔드 빌드 (폴더명이 PortfolioPulse일 때)
      - name: Build frontend
        working-directory: PortfolioPulse
        run: |
            npm cache clean --force
            rm -f package-lock.json
            npm install
            npm run build
            mkdir -p ../web_build
            cp -r dist/* ../web_build/
        env:
            CI: "true"

      # 키 파일로 복원
      - name: Write private key
        run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.EC2_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/github_deploy
            chmod 600 ~/.ssh/github_deploy

      # known_hosts 등록
      - name: Add known_hosts
        run: |
            ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # rsync 시 -e 로 키 지정
      - name: Rsync project to EC2
        run: rsync -az --delete --exclude ".git" --exclude ".github" --exclude ".env" --exclude ".venv" --exclude "node_modules" --exclude "PortfolioPulse/node_modules" --exclude "certbot/" --rsync-path="sudo rsync" -e "ssh -i ~/.ssh/github_deploy" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}/ # 서버에서 명령 실행 시에도 -i 지정
      - name: Restart compose on EC2
        run: |
            ssh -i ~/.ssh/github_deploy ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd ${{ secrets.EC2_PATH }}
            docker compose up -d --build
            docker system prune -f
            EOF